import logging as log

from api.builders.cve_builder import Cve
from api.builders.trends_cve_builder import CveTrendsTuple
from api.nist_api.enums import VectorsEnum, ComplexityEnum, CvssSeverityV3Enum, CvssSeverityV2Enum

NONE_TEMPLATE = '–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏  üòû'

RU_NAMES_VECTOR = {VectorsEnum.LOCAL.value: "–õ–æ–∫–∞–ª—å–Ω–æ",
                   VectorsEnum.ADJACENT_NETWORK.value: "–°–æ—Å–µ–¥–Ω—è—è —Å–µ—Ç—å",
                   VectorsEnum.NETWORK.value: "–°–µ—Ç—å"}

RU_NAMES_COMPLEXITY = {ComplexityEnum.LOW.value: "–ù–∏–∑–∫–∏–π",
                       ComplexityEnum.MEDIUM.value: "–°—Ä–µ–¥–Ω–∏–π",
                       ComplexityEnum.HIGH.value: "–í—ã—Å–æ–∫–∏–π"}

RU_NAMES_CVSS3_LEVEL = {CvssSeverityV3Enum.LOW.value: "üîµ –ù–∏–∑–∫–∏–π",
                        CvssSeverityV3Enum.MEDIUM.value: "üü° –°—Ä–µ–¥–Ω–∏–π",
                        CvssSeverityV3Enum.HIGH.value: "üü† –í—ã—Å–æ–∫–∏–π",
                        CvssSeverityV3Enum.CRITICAL.value: "üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π"}

RU_NAMES_CVSS2_LEVEL = {CvssSeverityV2Enum.LOW.value: "üîµ –ù–∏–∑–∫–∏–π",
                        CvssSeverityV2Enum.MEDIUM.value: "üü° –°—Ä–µ–¥–Ω–∏–π",
                        CvssSeverityV2Enum.HIGH.value: "üî¥ –í—ã—Å–æ–∫–∏–π"}


class ParamsFormatter:

    # def __init__(self, cve: Cve):
    #     self.__cve = cve
    #     pass

    def get_id(self, id_):
        return self.__get_param_or_template(id_)

    def get_link(self, link):
        return self.__get_param_or_template(link)

    def get_date(self, date):
        return self.__get_param_or_template(date)

    def get_cvss2(self, cvss2):

        if cvss2 is None:
            return NONE_TEMPLATE

        try:
            cvss2 = RU_NAMES_CVSS2_LEVEL[cvss2]
        except Exception as e:
            log.warning(f'[ParamsFormatter] [get_complexity] vector correspondence error: {cvss2}, e={e}')
            pass

        return cvss2

    def get_cvss2_and_score(self, cvss2, score):

        if cvss2 is None and score is None:
            return NONE_TEMPLATE

        cvss2 = self.get_cvss2(cvss2)

        return f'{cvss2} ({score})'

    def get_cvss3(self, cvss3):

        if cvss3 is None:
            return NONE_TEMPLATE

        try:
            cvss3 = RU_NAMES_CVSS3_LEVEL[cvss3]
        except Exception as e:
            log.warning(f'[ParamsFormatter] [get_complexity] vector correspondence error: {cvss3}, e={e}')
            pass

        return cvss3

    def get_cvss3_and_score(self, cvss3, score):

        if cvss3 is None and score is None:
            return NONE_TEMPLATE

        cvss3 = self.get_cvss3(cvss3)

        return f'{cvss3} ({score})'

    # def get_score(self, score):
    #     return self.__get_param_or_template(score)

    def get_vector(self, vector):

        if vector is None:
            return NONE_TEMPLATE

        try:
            vector = RU_NAMES_VECTOR[vector]
        except Exception as e:
            log.warning(f'[ParamsFormatter] [get_vector] vector correspondence error: {vector}, e={e}')
            pass

        return vector

    def get_complexity(self, complexity):

        if complexity is None:
            return NONE_TEMPLATE

        try:
            complexity = RU_NAMES_COMPLEXITY[complexity]
        except Exception as e:
            log.warning(f'[ParamsFormatter] [get_complexity] vector correspondence error: {complexity}, e={e}')
            pass

        return complexity

    def get_epss(self, epss):
        return self.__get_param_or_template(epss)

    def get_products_with_version(self, product, versions):
        products_with_version = ""

        if versions is not None and \
                product is not None:

            versions = versions.split('\n')
            products = product.split('\n')

            for v, p in zip(versions, products):
                products_with_version += f"""\n  -  {p}: {v}"""
                pass
            pass
        else:
            products_with_version = NONE_TEMPLATE
            pass

        return products_with_version

    def get_mentions(self, mentions):
        additional_sources = ""

        if mentions is not None:
            for link in mentions:
                additional_sources += f"""\n  -  <a href='{link}'>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫</a>"""
                pass
            pass
        else:
            additional_sources = NONE_TEMPLATE

        return additional_sources

    def get_description(self, description):
        return self.__get_param_or_template(description)

    def get_pocs(self, pocs):
        pocs_str = ""

        if pocs is not None and len(pocs) > 0:
            for link in pocs:
                pocs_str += f"""\n  -  <a href='{link}'>poc</a>"""
                pass
            pass
        else:
            return NONE_TEMPLATE

        return pocs_str

    def get_eliminations(self, elimination):
        return self.__get_param_or_template(elimination, '–°–∫–∞—á–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è')

    def __get_param_or_template(self, param, template=NONE_TEMPLATE):
        return param if param is not None else template

    # def get_audience(self, audience):
    #     pass
    #
    # def get_tweets_retweets(self, tweets_retweets):
    #     pass
    #
    # def get_tweets(self, tweets):
    #     pass
    #
    # def get_retweets(self, retweets):
    #     pass
    #
    # def get_reddit(self, reddit):
    #     pass
    pass


def get_cve_by_id_output_text(cve: Cve) -> str:
    formatter = ParamsFormatter()

    message = f"""
<b>–ü–æ –¥–∞–Ω–Ω–æ–º—É cve id –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>:

‚ë† <b>–ù–æ–º–µ—Ä CVE</b>: <a href='{formatter.get_link(cve.id)}'>{formatter.get_id(cve.id)}</a>
‚ë° <b>–î–∞—Ç–∞/–≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ CVE</b>: {formatter.get_date(cve.date)}
‚ë§ <b>–£—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ CVSS v2</b>: {formatter.get_cvss2_and_score(cve.cvss2, cve.score_v2)}
‚ë§ <b>–£—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ CVSS v3</b>: {formatter.get_cvss3_and_score(cve.cvss3, cve.score_v3)}
‚ë• <b>–í–µ–∫—Ç–æ—Ä –∞—Ç–∞–∫–∏</b>: {formatter.get_vector(cve.vector)}
‚ë¶ <b>–°–ª–æ–∂–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏</b>: {formatter.get_complexity(cve.complexity)}
‚ëß <b>EPSS —Ä–µ–π—Ç–∏–Ω–≥</b>: {formatter.get_epss(cve.epss)}
‚ë® <b>–ü—Ä–æ–¥—É–∫—Ç/–≤–µ–Ω–¥–æ—Ä –∏ –≤–µ—Ä—Å–∏—è –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–∞ CVE</b>: {formatter.get_products_with_version(cve.product, cve.versions)}
‚ë© <b>–°—Å—ã–ª–∫–∏ –Ω–∞ —Å—Ç–∞—Ç—å–∏ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –∏ –¥—Ä—É–≥–∞—è –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>: {formatter.get_mentions(cve.mentions)}
‚ë™ <b>–û–ø–∏—Å–∞–Ω–∏–µ CVE</b>: {formatter.get_description(cve.description)}
‚ë´ <b>–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é —É—è–∑–≤–∏–º–æ—Å—Ç–∏</b>: {formatter.get_eliminations(cve.elimination)}
‚ë¨ <b>POC</b>: {formatter.get_pocs(cve.poc)}
    """

    return message


def get_trends_cve_output_text(cve: CveTrendsTuple, number: int) -> str:
    formatter = ParamsFormatter()

    # additional_sources = ""
    #
    # for item in result_cve.vendor_advisories:
    #     additional_sources += f"""\n  -  <a href='{item}'>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫</a>"""

    message = f"""
    –ù–æ–º–µ—Ä: {number + 1}
    
‚ë† <b>–ù–æ–º–µ—Ä CVE</b>: {formatter.get_id(cve.id)}
  - <a href='https://www.cve.org/CVERecord?id={formatter.get_id(cve.id)}'>–ø—Ä–æ—á–∏—Ç–∞—Ç—å –±–æ–ª—å—à–µ –Ω–∞ on cve.org</a>
  - <a href='https://nvd.nist.gov/vuln/detail/{formatter.get_id(cve.id)}'>–ø—Ä–æ—á–∏—Ç–∞—Ç—å –±–æ–ª—å—à–µ –Ω–∞ nvd.nist.gov</a>
  - <a href='https://cve.report/{formatter.get_id(cve.id)}'>–ø—Ä–æ—á–∏—Ç–∞—Ç—å –±–æ–ª—å—à–µ –Ω–∞ cve.report</a> 
‚ë° <b>–î–∞—Ç–∞/–≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ CVE</b>: {formatter.get_date(cve.published_date)}
‚ë¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤</b>: {cve.audience_size}
‚ë£ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–º —Å–µ—Ç—è–º</b>:
  -  <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>: {cve.num_tweets_and_retweets}
  -  <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–≤–∏—Ç–æ–≤</b>: {cve.num_tweets}
  -  <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ç–≤–∏—Ç–æ–≤</b>: {cve.num_retweets}
  -  <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –Ω–∞ —Ä–µ–¥–∏—Ç–µ</b>: {cve.nums_reddit_posts}
‚ë§ <b>CVSS v2</b>: {formatter.get_cvss2_and_score(cve.cvss_v2, cve.score_v2)} 
‚ë• <b>CVSS v3</b>: {formatter.get_cvss3_and_score(cve.cvss_v3, cve.score_v3)}
‚ë¶ <b>–°—Å—ã–ª–∫–∏ —Å –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π</b>: {formatter.get_mentions(cve.vendor_advisories)}
‚ëß <b>EPSS —Ä–µ–π—Ç–∏–Ω–≥</b> {formatter.get_epss(cve.epss_score)}
‚ë® <b>–û–ø–∏—Å–∞–Ω–∏–µ CVE:</b> {formatter.get_description(cve.description)}
    """
    return message


EMPTY_PARAM_TEMPLATE = '–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ'


def get_params_text(params: dict) -> str:
    for k, v in params.items():
        if not v:
            params[k] = None
            pass
        pass

    formatter = ParamsFormatter()

    if params["cvss_version"] is not None:
        match params["cvss_version"]:
            case '2':
                cvss_func = formatter.get_cvss2
            case '3':
                cvss_func = formatter.get_cvss3
            case _:
                cvss_func = formatter.get_cvss3

        levels = []
        for level in params["cvss_param"]:
            levels.append(cvss_func(level))
            pass
        params["cvss_param"] = ', '.join(levels)
        pass

    if params["vector"] is not None:
        vectors = []
        for vector in params["vector"]:
            vectors.append(formatter.get_vector(vector))
            pass
        params["vector"] = ', '.join(vectors)
        pass

    if params["complexity"] is not None:
        complexities = []
        for complexity in params["complexity"]:
            complexities.append(formatter.get_complexity(complexity))
            pass
        params["complexity"] = ', '.join(complexities)
        pass

    result_text = f"""
    <b>–í–µ–Ω–¥–æ—Ä</b>: {params["vendor"] if params["vendor"] is not None else EMPTY_PARAM_TEMPLATE}
    <b>–ü—Ä–æ–¥—É–∫—Ç</b>: {params["product"] if params["product"] is not None else EMPTY_PARAM_TEMPLATE}
    <b>–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞</b>: {params["start_date"] if params["start_date"] is not None else EMPTY_PARAM_TEMPLATE}
    <b>–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞</b>: {params["end_date"] if params["end_date"] is not None else EMPTY_PARAM_TEMPLATE}
    <b>–í–µ—Ä—Å–∏—è CVSS</b>: {params["cvss_version"] if params["cvss_version"] is not None else EMPTY_PARAM_TEMPLATE}
    <b>–ó–Ω–∞—á–µ–Ω–∏–µ cvss</b>: {params["cvss_param"] if params["cvss_param"] is not None else EMPTY_PARAM_TEMPLATE}
    <b>–í–µ–∫—Ç–æ—Ä</b>: {params["vector"] if params["vector"] is not None else EMPTY_PARAM_TEMPLATE}
    <b>–°–ª–æ–∂–Ω–æ—Å—Ç—å</b>: {params["complexity"] if params["complexity"] is not None else EMPTY_PARAM_TEMPLATE}
    """
    return result_text
