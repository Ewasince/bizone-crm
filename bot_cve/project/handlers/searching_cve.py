from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from datetime import datetime

from cve_api import aget_cve_by_id
from forms import FindCVEGroup

from config import config

import logging as log

import kb

router = Router()


@router.callback_query(F.data == "find_cve_tg")
async def process_callback_find_cve(callback_query: CallbackQuery, state: FSMContext):
    '''
        find_cve_menu handler
    '''
    user_data = await state.get_data()

    await callback_query.message.answer(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–∏—Å–∫–∞: {user_data}", reply_markup=kb.find_cve_markup)


@router.callback_query(F.data == "find_cve_by_id")
async def process_callback_add_id(callback_query: CallbackQuery, state: FSMContext):
    '''
        find_cve_menu: handler for the button that adds the CVE`s id parameter
    '''
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ Id")
    await state.set_state(FindCVEGroup.id)


@router.message(FindCVEGroup.id)
async def adding_id(message: Message, state: FSMContext):
    inserted_id: str = message.text

    # try:
    #     inserted_id = int(inserted_id)
    # except Exception as e:
    #     log.debug(e)
    #     return await message.answer(
    #         "–ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ Id, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
    #         reply_markup=kb.main_markup
    #     )

    try:

        result_cve_list = await aget_cve_by_id(inserted_id)

        if len(result_cve_list) != 1:
            raise Exception("Wrong number of cve!")
            pass

        result_cve = result_cve_list[0]

    except Exception as e:
        log.warning(f'[adding_id] FAIL e={e}')
        return
        pass

    await message.answer(f'''
–ü–æ –¥–∞–Ω–Ω–æ–º—É id –Ω–∞–π–¥–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è :
        
üîµ –ù–æ–º–µ—Ä CVE <a href='{result_cve.link}'>{result_cve.id}</a>
üîµ –î–∞—Ç–∞/–≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ CVE {result_cve.date}
üîµ –û–ø–∏—Å–∞–Ω–∏–µ CVE {result_cve.description}
        
üîµ CVSSv2 {result_cve.cvss2}
üîµ CVSSv3 {result_cve.cvss3}
        
üîµ –£—Ä–æ–≤–µ–Ω—å –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ {result_cve.score}
üîµ –í–µ–∫—Ç–æ—Ä –∞—Ç–∞–∫–∏ {result_cve.vector}
üîµ –°–ª–æ–∂–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏ {result_cve.complexity}
üîµ EPSS —Ä–µ–π—Ç–∏–Ω–≥ {result_cve.epss}
        
üîµ –ü—Ä–æ–¥—É–∫—Ç/–≤–µ–Ω–¥–æ—Ä –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω–∞ CVE {result_cve.product}
üîµ –£—è–∑–≤–∏–º—ã–µ –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ {result_cve.versions}
        
üîµ PoC/CVE WriteUp (–° –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏, –µ—Å–ª–∏ –µ—Å—Ç—å) {result_cve.poc}
üîµ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π {result_cve.mentions}
üîµ –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—é —É—è–∑–≤–∏–º–æ—Å—Ç–∏ {result_cve.elimination if result_cve.elimination else '–≤–æ–≤—Ä–µ–º—è –æ–±–Ω–æ–≤–∏—Ç—å—Å—è'}
'''
    )

    await message.answer(
        f"–ú–µ–Ω—é",
        reply_markup=kb.main_markup
    )


@router.callback_query(F.data == "find_cve_name")
async def process_callback_add_product_name(callback_query: CallbackQuery, state: FSMContext):
    '''
        find_cve_menu: Handler for the button that adds the product name parameter
    '''
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")
    await state.set_state(FindCVEGroup.product)


@router.message(FindCVEGroup.product)
async def addiing_product_name(message: Message, state: FSMContext):
    inserted_name = message.text

    await state.update_data(product=inserted_name)

    user_data = await state.get_data()

    await message.answer(
        f"–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –¥–∞–Ω–Ω—ã–µ: {user_data}",
        reply_markup=kb.find_cve_markup
    )


@router.callback_query(F.data == "find_cve_start_date")
async def process_callback_add_start_date(callback_query: CallbackQuery, state: FSMContext):
    '''
        find_cve_menu: Handler for the button that adds the start date parameter
    '''
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'dd.mm.yyyy'")
    await state.set_state(FindCVEGroup.start_date)


@router.message(FindCVEGroup.start_date)
async def addiing_start_date(message: Message, state: FSMContext):
    inserted_date = message.text

    try:
        datetime.strptime(inserted_date, "%d.%m.%Y")

        await state.update_data(start_date=inserted_date)

    except ValueError as e:
        log.debug(e)

        user_data = await state.get_data()

        return await message.answer(
            f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–∞—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
            reply_markup=kb.find_cve_markup
        )

    user_data = await state.get_data()

    await message.answer(
        f"–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –¥–∞–Ω–Ω—ã–µ: {user_data}",
        reply_markup=kb.find_cve_markup
    )


@router.callback_query(F.data == "find_cve_end_date")
async def process_callback_add_end_date(callback_query: CallbackQuery, state: FSMContext):
    '''
        find_cve_menu: Handler for the button that adds the end date parameter
    '''
    await callback_query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'dd.mm.yyyy'")
    await state.set_state(FindCVEGroup.end_date)


@router.message(FindCVEGroup.end_date)
async def addind_end_date(message: Message, state: FSMContext):
    inserted_date = message.text

    try:
        datetime.strptime(inserted_date, "%d.%m.%Y")

        await state.update_data(start_date=inserted_date)

    except ValueError as e:
        log.debug(e)

        user_data = await state.get_data()

        return await message.answer(
            f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞ –¥–∞—Ç—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
            reply_markup=kb.find_cve_markup
        )

    user_data = await state.get_data()

    await message.answer(
        f"–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –¢–µ–ø–µ—Ä—å –¥–∞–Ω–Ω—ã–µ: {user_data}",
        reply_markup=kb.find_cve_markup
    )


@router.callback_query(F.data == "find_cve_cvss")
async def process_callback_add_cvss(callback_query: CallbackQuery, state: FSMContext):
    '''
        find_cve_menu: Handler for the button that adds the CVSS parameter
    '''
    await callback_query.message.edit_text(
        "–ö–∞–∫—É—é –≤–µ—Ä—Å–∏—é CVSS –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å",
        reply_markup=kb.find_cve_cvss_markup
    )


@router.callback_query(F.data == "find_cve_cvss_v2")
async def process_callback_add_cvss_v2(callback_query: CallbackQuery, state: FSMContext):
    '''
        cvss_menu: Handler for the button that selects version v2
    '''
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞—á–∏–µ:",
        reply_markup=kb.cvss_v2_markup
    )
